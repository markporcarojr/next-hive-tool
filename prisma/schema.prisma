// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  clerkId    String       @unique
  email      String       @unique
  name       String?
  harvests   Harvest[]
  Hive       Hive[]
  Inspection Inspection[]
}

model Harvest {
  id            Int      @id @default(autoincrement())
  harvestType   String
  harvestAmount Float
  harvestDate   DateTime
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Hive {
  id            Int          @id @default(autoincrement())
  hiveDate      DateTime
  hiveNumber    Int?
  hiveSource    String
  hiveImage     String?
  broodBoxes    Int?
  superBoxes    Int?
  hiveStrength  Int?
  queenColor    String?
  queenAge      String?
  queenExcluder String?
  breed         String?
  frames        Int?
  todo          String?
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  inspections   Inspection[]
}

model Inspection {
  id               Int      @id @default(autoincrement())
  temperament      String
  hiveStrength     Int
  inspectionDate   DateTime
  inspectionImage  String? // optional
  queen            Boolean? // optional
  queenCell        Boolean? // optional
  brood            Boolean? // optional
  disease          Boolean? // optional
  eggs             Boolean? // optional
  pests            String? // optional
  feeding          String? // optional
  treatments       String? // optional
  inspectionNote   String? // optional
  weatherCondition String? // optional
  weatherTemp      String? // optional

  userId Int
  user   User @relation(fields: [userId], references: [id])

  hiveId Int
  hive   Hive @relation(fields: [hiveId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
